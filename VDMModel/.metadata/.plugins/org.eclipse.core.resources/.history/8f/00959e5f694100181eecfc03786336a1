class Measurement

instance variables

leftEncoder:Encoder;
rightEncoder:Encoder;

-- Start and stop readings for the left encoder
leftStartMeasure:real;
leftStopMeasure:real;

-- Start and stop readings for the right encoder
rightStartMeasure:real;
rightStopMeasure:real;

operations

public Measurement: Encoder * Encoder ==> Measurement
	Measurement(en1,en2) == (
		leftEncoder := en1;
		rightEncoder := en2;
		
		-- Initilise left and right start and stop measures.
		leftStartMeasure := 0;
		leftStopMeasure:real := 0;
		
		rightStartMeasure := 0;
		rightStopMeasure:real := 0;
	);

-- Collects readings from both encoders and stores them in the start measures
public startReading: () ==> ()
	startReading() == (
		leftStartMeasure := leftEncoder.getReading();
		rightStartMeasure := rightEncoder.getReading();
	);

-- Collects readings from both ecnoders and stores them in the end measures
public stopReading: () ==> ()
	stopReading() == (
		leftEndMeasure := leftEncoder.getReading();
		rightEndMeasure := rightEncoder.getReading();
	);

-- Calculates the total distanced traveled by both encoders and determines the average value
public getMeasurement: () ==> real
	getMeasurement() == (
		dcl rightDistance:real;
		dcl leftDistance:real;
		-- If measurement does not have a complete set of measures then return 0. Slightly redundant checking both sets but thoroughness always helps!
		if(leftStartMeasure = 0 or leftStopMeasure = 0 or rightStartMeasure = 0 or rightStopMeasure = 0) then
			return 0
		else (
			leftDistance := leftStopMeasure - leftStartMeasure;
			rightDistance := rightStopMeasure - leftStartMeasure;
			
			return (leftDistance + rightDistance) / NUMOFENCODERS;
		
		)
	)
	
	
values
	NUMOFENCODERS = 2 -- Number of encoders, change change if in future more encoders are added. Also stops magic numbers living in the code


end Measurement
