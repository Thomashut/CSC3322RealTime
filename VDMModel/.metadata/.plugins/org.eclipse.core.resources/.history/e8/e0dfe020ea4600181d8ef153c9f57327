class Controller

instance variables

-- sensor objects
sensor1: IRSensor;
sensor2: IRSensor;
sensor3: IRSensor;
sensor4: IRSensor;
sensor5: IRSensor;

-- servo objects
leftServo: Servo;
rightServo: Servo;

-- Helper Flags
started: bool; -- marks when the robot has first found the line
stopped: bool; -- marks when the robot completly loses a found line or the line ends

-- Measurement Object
measureObject: Measurement;

operations

-- constructor for Controller
public Controller: IRSensor * IRSensor * IRSensor * IRSensor * IRSensor * Servo * Servo * Measurement ==> Controller
Controller(lf1, lf2, lf3, lf4, lf5, ls, rs, m) == (
	sensor1 := lf1;
	sensor2 := lf2;
	sensor3 := lf3;
	sensor4 := lf4;
	sensor5 := lf5;
	leftServo := ls;
	rightServo := rs;
	measureObject := m;
	
	started := false;
	stopped := false;
);

-- main loop
Step: () ==> ()
Step() == cycles(20) (
	-- If the robot hasn't finished keep trying to find and follow the line
	if(not stopped) then (
			-- Initially the robot attempts to find the line by simply diving forward.
			while (sensor1.getReading() >= 150 and sensor2.getReading() >= 150 and (not started)) do (
				IO`printf("%s \n","*********************************");
				IO`printf("%s \n","Hunting for Line");
				IO`printf("%s \n","*********************************"); 
				leftServo.setSpeed(0.8);
				rightServo.setSpeed(0.8)
			);
			
			-- Robot has finally found the line. Start Measuring it's length
			if(sensor1.getReading() < 150 and sensor2.getReading() < 150 and (not started)) then (
				IO`printf("%s \n","*********************************");
				IO`printf("%s \n","Found the Line :D");
				IO`printf("%s \n","*********************************");
				started := true;
				measureObject.startReading();
			);
			
			-- If both sensors detect the black line then robot must be on top of the line
			if(sensor1.getReading() < 150 and sensor2.getReading() < 150) then (
				IO`printf("%s \n","*********************************");
				IO`printf("%s \n","Following Line");
				IO`printf("%s \n","*********************************");
				leftServo.setSpeed(0.8);
				rightServo.setSpeed(0.8)
			);
			
			-- Left Sensor detects blackline, right detects white. Turn left to correct
			if(sensor1.getReading() < 150 and sensor2.getReading() >= 150) then (
				IO`printf("%s \n","*********************************");
				IO`printf("%s \n","Turning Left");
				IO`printf("%s \n","*********************************");
				/*
					Completely stop the robot first. This may be slower to navigate a black line but it should be more accurate.
					This is because there will be minimal adjustments and overdrive when the sensors return different readings.
					It is slower however as the robot will be stopping and starting every time the enviroment changes.
				*/
				leftServo.setSpeed(0.0);
				rightServo.setSpeed(0.0);
				
				rightServo.setSpeed(0.8);
			); 
			
			-- Left Sensor detects white and right detects black. Turn right to correct
			if(sensor1.getReading() >= 150 and sensor2.getReading() < 150) then (
				IO`printf("%s \n","Turning Right");
				leftServo.setSpeed(0.0);
				rightServo.setSpeed(0.0);
				
				leftServo.setSpeed(0.8);
			);
			
			-- Robot has either completly lost the line or it has ended. Either way terminate and stop measuring.
			if(sensor1.getReading() >= 150 and sensor2.getReading() >= 150 and started) then (
				IO`printf("%s \n","*********************************");
				IO`printf("%s \n","Lost the Line or it Finished");
				IO`printf("%s \n","*********************************");
				measureObject.stopReading();
				leftServo.setSpeed(0.0);
				rightServo.setSpeed(0.0);
				stopped := true
			);
		
		) else (
			IO`printf("%s \n","Finished");
			IO`printf("%s %d %s \n",["The Line was: ", measureObject.getMeasurement(), " Metres Long"]); 
		)
);

-- debug information
PrintReadings: () ==> ()
PrintReadings() == (
    IO`printf("Readings: [%s, %s, %s, %s, %s]\n", 
      [sensor1.getReading(), 
       sensor2.getReading(), 
       sensor3.getReading(),
       sensor4.getReading(),
			 sensor5.getReading()]);
)

thread
periodic(10E6, 0, 0, 0)(Step)


values
	irThreashold = 150; -- Used to detect if the robot has found the black line or not. >= 150 = white, < 150 = black

end Controller